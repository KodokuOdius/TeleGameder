from django.core.management.base import BaseCommand
from asgiref.sync import sync_to_async, async_to_sync
from django.conf import settings

from Bot.models import Users, Games

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram import exceptions as Aex

from random import choice as ch

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegUser(StatesGroup):
    username = State()
    about = State()
    game = State()
    search = State()
    is_correct = State()


bot = Bot(token=settings.TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())


MainKey = (
    ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    .row(
        KeyboardButton("ü§ù"),
        KeyboardButton("‚û°")
    )
)



async def gen_keybord(data: list, inline: bool = False):
    if not inline:
        KeyBoard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        for i, datum in enumerate(data):
            Key = KeyboardButton(datum)
            KeyBoard.add(Key)
            
            # if i % 3:
            #     KeyBoard.row()

    else:
        # callback_data
        KeyBoard = InlineKeyboardMarkup(row_width=1)

        for i, datum in enumerate(data):
            Key = InlineKeyboardButton(datum)
            KeyBoard.add(Key)


    return KeyBoard




@sync_to_async(thread_sensitive=True)
def get_user(id):
    try:
        temp = Users.objects.get(tg_id=id)
        return temp if temp else False

    except Exception as ex:
        print(ex)
        # return None, True

@sync_to_async(thread_sensitive=True)
def get_games():
    try:

        Qset = Games.objects.all()
        temp = [temp.title for temp in Qset]
        return temp
    except Exception as ex:
        print(ex)


@sync_to_async(thread_sensitive=True)
def create_user(data):
    try:
        Users.objects.get_or_create(
            username=data["username"],
            game=data["game"],
            about=data["about"],
            search_game=data["search"],
            tg_id=data["tg"]
        )

        return True
    except Exception as ex:
        print(ex)
        return False



@sync_to_async(thread_sensitive=True)
def get_users_by_prefer(id, game):
    try:
        from django.db.models import Q

        friends = Users.objects.filter(Q(search_game=game) & Q(is_search=1)).exclude(tg_id=id)
        friends = [friend for friend in friends]
        return friends
    except Exception as ex:
        print(ex)


@sync_to_async(thread_sensitive=True)
def update_user(id, *args, **kwargs):
    try:
        user = Users.objects.filter(tg_id=id).update(**kwargs)
        return True
    except Exception as ex:
        print(ex)


@dp.message_handler(state=RegUser.username)
async def username(event: types.Message, state: FSMContext):
    await state.update_data(username=event.text, tg=event.from_user.id)

    await event.answer(
        "–û—Ç–ª–∏—á–Ω–æ!\n" +
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ\n" +
        "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç—É —Å–∞–º—É—é –∫–æ–º–∞–Ω–¥—É '–ú–µ—á—Ç—ã'"
    )

    await RegUser.about.set()


@dp.message_handler(state=RegUser.about)
async def second(event: types.Message, state: FSMContext):
    from random import shuffle as sh

    await state.update_data(about=event.text)
    temp_data = await get_games()
    sh(temp_data)

    game_key = await gen_keybord(
        data=temp_data[:4]
    )

    await event.answer(
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –ª—é–±–∏–º—É—é –∏–≥—Ä—É (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)\n" +
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞",
        reply_markup=game_key
    )

    await RegUser.game.set()


@dp.message_handler(state=RegUser.game)
async def game(event: types.Message, state: FSMContext):
    await state.update_data(game=event.text)
    data = await state.get_data()
    game = data["game"]

    small_key = await gen_keybord([game])

    await event.answer(
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Ç–æ–∂–µ —á–∞—Å—Ç–æ –∏–≥—Ä–∞—é –≤ —ç—Ç—É –∏–≥—Ä—É)\n" +
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n" +
        "–í –∫–∞–∫–æ–π –∏–≥—Ä–µ —Ç—ã –±—É–¥–µ—à—å –∏—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π?\n" +
        "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)" +
        "–∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è",
        reply_markup=small_key
    )


    await RegUser.search.set()



@dp.message_handler(state=RegUser.search)
async def last_question(event: types.Message, state: FSMContext):
    await state.update_data(search=event.text)

    data = await state.get_data()

    await event.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞\n" +
        f"–¢–≤–æ–π username: {data['username']}\n"
        f"–õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {data['game']}\n" +
        f"–ò–≥—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {data['search']}\n" +
        f"–û —Å–µ–±–µ: \n  {data['about']}",
        # reply_markup=ReplyKeyboardRemove()
    )


    end_key = await gen_keybord(["–î–∞ üòÅ", "–ù–µ—Ç –∑–∞–Ω–æ–≤–æ) ü§£"])
    await event.answer(
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=end_key
    )

    # finish states
    await RegUser.is_correct.set()



@dp.message_handler(state=RegUser.is_correct)
async def finish(event: types.Message, state: FSMContext):
    if event.text == "–î–∞ üòÅ":
        user = await get_user(event.from_user.id)
        data = await state.get_data()
        if not user:
            result = await create_user(data)
        else:
            result = await update_user(
                event.from_user.id,
                username=data["username"],
                game=data["game"],
                about=data["about"],
                search_game=data["search"]
            )

            await state.reset_state()
            return await profile_menu(event)

        # if result:
        #     await event.answer(
        #         "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Ç–µ–±—è –∑–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞–ª!"
        #     )
        
        # await start_search(event=event, state=state)


    elif event.text == "–ù–µ—Ç –∑–∞–Ω–æ–≤–æ) ü§£":
        await event.answer(
            "–õ–∞–¥–Ω–æ... –ó–∞–Ω–æ–≤–æ"
        )
        await event.answer(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–∏–∑ Steam –∏–ª–∏ –∫–∞–∫–æ–π —á–∞—Å—Ç–æ –∏—Å–∫–æ–ª—å–∑—É–µ—à—å –≤ –∏–≥—Ä–∞—Ö)"
        )

        await RegUser.username.set()






class ProfileMenu(StatesGroup):
    menu = State()
    new_search = State()


class SearchState(StatesGroup):
    search = State()


@dp.message_handler(state=ProfileMenu.menu, text="üòô")
async def start_search(event: types.Message, state: FSMContext):
    await event.answer(
        "–ù–∞—á–Ω—ë–º –ø–æ–∏—Å–∫ –¢–∏–º–µ–π—Ç–æ–≤\n" +
        "‚û° - –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞\n" +
        "ü§ù - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥—Ä—É–∂–±–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–æ—á–∫–∏\n\n" +
        "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å –ø–æ–∏—Å–∫–∞–º–∏ –ø—Ä–∏—à–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫)"
    )
    user = await get_user(event.from_user.id)

    friends = await get_users_by_prefer(event.from_user.id, user.search_game)

    if not friends:
        return await event.answer(
            "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–æ–π –∏–≥—Ä–æ–π, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ\n" +
            "/profile"
        )
    friend = friends.pop()

    await event.answer(
        f"{friend.username}\n" +
        f"–õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {friend.game}\n" +
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {friend.about}",
        reply_markup=MainKey
    )

    await SearchState.search.set()
    await state.update_data(friend_id=friend.tg_id, friends=friends)


@dp.message_handler(state=SearchState.search)
async def answer(event: types.Message, state: FSMContext):
    answer = event.text
    if answer not in ["ü§ù", "‚û°"]:
        await event.answer("–ó–∞–∫–æ–Ω—á–∏–º —Å –ø–æ–∏—Å–∫–æ–º)")
        await state.reset_state()
        return await profile_menu(event)

    if answer == "ü§ù":
        data = await state.get_data()
        friend_id = data["friend_id"]

        try:
            user_name = event.from_user.username

            await event.bot.send_message(
                chat_id=friend_id,
                text=(
                    f"–í–Ω–∏–º–∞–Ω–∏–µ! –¢–≤–æ—è –∫–æ—Ä—Ç–æ—á–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name}"
                )
            )

            await event.answer(
                "–¢–≤–æ–π –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–º —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" +
                "–î–∞–≤–∞–π –¥–∞–ª—å—à–µ"
            )
            
        except Aex.BotBlocked:
            await event.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        except Exception as ex:
            print(ex)
            await event.answer(
                "–ù–µ –º–æ–≥—É –¥–æ—Å—Ç–∞—Ç—å —Ç–≤–æ–π username –∏–∑ Telegram\n" +
                "–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ username –∏–ª–∏ –∏–∑–º–µ–Ω–∏ —á—Ç–æ-—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —Ç–æ–≥–¥–∞ —è —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç!"
            )

    data = await state.get_data()
    friends = data["friends"]

    if not friends:
        await state.reset_state()

        return await event.answer(
            "–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ (("
        )

    friend = friends.pop()

    await event.answer(
        f"{friend.username}\n" +
        f"–õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {friend.game}\n" +
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n {friend.about}",
        reply_markup=MainKey
    )

    await state.update_data(friend_id=friend.tg_id, friends=friends)


@dp.message_handler(state=ProfileMenu.menu, text="üòÅ")
async def new_search_game(event: types.Message):
    from random import shuffle as sh

    temp_data = await get_games()
    sh(temp_data)

    game_key = await gen_keybord(
        data=temp_data[:4]
    )

    await event.answer(
        "–ù–∞–ø–∏—à–∏ –¥—Ä—É–≥—É—é –∏–≥—Ä—É (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) –¥–ª—è –ø–æ–∏—Å–∫–∞\n" +
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞",
        reply_markup=game_key
    )
    
    await ProfileMenu.new_search.set()

@dp.message_handler(state=ProfileMenu.new_search)
async def catch_new_game(event: types.Message, state: FSMContext):
    new_search = event.text
    await update_user(
        event.from_user.id,
        search_game=new_search
    )

    await state.reset_state()
    await profile_menu(event)


@dp.message_handler(state=ProfileMenu.menu, text="üòë")
async def new_profile(event: types.Message):
    await event.answer(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–∏–∑ Steam –∏–ª–∏ –∫–∞–∫–æ–π —á–∞—Å—Ç–æ –∏—Å–∫–æ–ª—å–∑—É–µ—à—å –≤ –∏–≥—Ä–∞—Ö)"
    )

    await RegUser.username.set()

@dp.message_handler(state=ProfileMenu.menu, text="üò£")
async def change_search(event: types.Message, state: FSMContext):
    user = await get_user(event.from_user.id)

    await update_user(
        event.from_user.id,
        is_search=0 if bool(user.is_search) else 1
    )

    await state.reset_state()
    await profile_menu(event)



@dp.message_handler(Command("profile"))
async def profile_menu(event: types.Message):
    user = await get_user(
        id=event.from_user.id
    )

    if not user:
        await start_bot(event)
    else:
        profile_key = (
            ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            .row(
                KeyboardButton("üòô"),
                KeyboardButton("üòÅ"),
                KeyboardButton("üò£"),
                KeyboardButton("üòë")
            )
        )


        await event.answer(
            "–í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞\n" +
            f"–¢–≤–æ–π username: {user}\n" + 
            ("-–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ\n" if bool(user.is_search) else "-–í–Ω–µ –ø–æ–∏—Å–∫–∞\n") +
            f"–õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {user.game}\n" +
            f"–ò–≥—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {user.search_game}\n" +
            f"–û —Å–µ–±–µ: \n  {user.about}",
            reply_markup=profile_key
        )

        await event.answer(
            "üòô - –ü–æ–∏—Å–∫\n" + 
            "üòÅ - –ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞\n" +
            "üò£ - –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫\n (–ï—Å–ª–∏ –≤ –ø–æ–∏—Å–∫–µ, —Ç–æ –≤—ã–π–¥–µ—à—å –∏–∑ –ø–æ–∏—Å–∫–∞, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)\n" +
            "üòë - –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"
        )
        
        await ProfileMenu.menu.set()
        


@dp.message_handler(Command("help"))
async def help(event: types.Message):
    await event.answer(
        "–î–µ—Ä–∂–∏—Å—å, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è!"
    )


@dp.message_handler(Command("start"))
async def start_bot(event: types.Message):

    is_created = await get_user(
        event.from_user.id,
    )

    if is_created:
        # start Search
        await event.answer(event.text)
    else:
        await event.answer(
            "–ü—Ä–∏–≤–µ—Ç, –Ø –≤–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ)\n " +
            "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–¥–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∏–º–µ–π—Ç–æ–≤ –ø–æ —Ä–∞–∑–Ω—ã–º –∏–≥—Ä–∞–º –∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π\n " +
            "–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ-—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n " +
            "–ù–∞—á–Ω—ë–º!"
        )

        await event.answer(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–∏–∑ Steam –∏–ª–∏ –∫–∞–∫–æ–π —á–∞—Å—Ç–æ –∏—Å–∫–æ–ª—å–∑—É–µ—à—å –≤ –∏–≥—Ä–∞—Ö)"
        )

        await RegUser.username.set()
        

    

async def start(dp: Dispatcher):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å")
    ])

    
async def shutdown(dp: Dispatcher):
    await dp.storage.close()
    await dp.storage.wait_closed()


# Start bot with Django
class Command(BaseCommand):
    help = "Telegram Bot"

    def handle(self, *args, **options):

        print(args)
        print(options)
        
        # bot = telepot.Bot(token=settings.TOKEN)
        # print(bot.getMe())

        executor.start_polling(
            dp, 
            #skip_updates=True,
            on_startup=start,
            on_shutdown=shutdown
        )




